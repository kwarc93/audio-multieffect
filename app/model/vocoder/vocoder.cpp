/*
 * vocoder.cpp
 *
 *  Created on: 24 sty 2024
 *      Author: kwarc
 */

#include "vocoder.hpp"

#include <algorithm>
#include <cassert>

using namespace mfx;

//-----------------------------------------------------------------------------
/* helpers */

namespace
{

}

//-----------------------------------------------------------------------------
/* private */

/* Vintage vocoder (bandpass filter bank) */
class vocoder::vintage_vocoder
{
public:
    vintage_vocoder(vocoder_attr &attributes) : attr {attributes}
    {
        for (unsigned i = 0; i < bands; i++)
        {
            this->car_bpf[i].set_coeffs(this->bandpass_coeffs[i]);
            this->car_lpf[i].set_coeffs(this->lowpass_coeffs);
            this->mod_bpf[i].set_coeffs(this->bandpass_coeffs[i]);
            this->mod_lpf[i].set_coeffs(this->lowpass_coeffs);
        }
    }

    void process(const dsp_input &car, const dsp_input &mod, dsp_output &out)
    {
        arm_fill_f32(0, out.data(), out.size());

        for (unsigned band = 0; band < this->bands; band++)
        {
            /* Carrier envelope */
            this->car_bpf[band].process(car.data(), this->car_bp.data(), this->car_bp.size());
            arm_mult_f32(this->car_bp.data(), this->car_bp.data(), this->car_env.data(), this->car_env.size());
            this->car_lpf[band].process(this->car_env.data(), this->car_env.data(), this->car_env.size());

            /* Modulator envelope */
            if (!this->attr.ctrl.hold)
            {
                this->mod_bpf[band].process(mod.data(), this->mod_env.data(), this->mod_env.size());
                arm_mult_f32(this->mod_env.data(), this->mod_env.data(), this->mod_env.data(), this->mod_env.size());
                this->mod_lpf[band].process(this->mod_env.data(), this->mod_env.data(), this->mod_env.size());

                /* Save modulator envelope for 'hold' feature */
                arm_mean_f32(this->mod_env.data(), this->mod_env.size(), &this->mod_hold[band]);
            }

            /* Cross-synthesis */
            const float epsi = (1 - this->attr.ctrl.clarity);
            for (unsigned i = 0; i < out.size(); i++)
            {
                if (this->attr.ctrl.hold)
                    this->mod_env[i] = this->mod_hold[band];

                float env;
                arm_sqrt_f32(this->mod_env[i] / (this->car_env[i] + epsi), &env);
                out[i] += this->car_bp[i] * env;
            }
        }
    }

    constexpr static unsigned bands {12};

private:

    /* Lowpass filter (RMS envelope) */
    static constexpr std::array<float, 5> lowpass_coeffs { 0, 0, 1, 1.99f, -0.990025f};

    /* Band 1: 40.0 Hz - 160.0 Hz */
    static constexpr std::array<float, 10> bandpass_1_coeffs
    {
        0.0000307599601917,0.0000615199203835,0.0000307599601917,1.9920333297484687,-0.9923716953276023,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,1.9974953291636923,-0.9975306902126135
    };
    /* Band 2: 233.3 Hz - 366.7 Hz */
    static constexpr std::array<float, 10> bandpass_2_coeffs
    {
        0.0000379539863047,0.0000759079726094,0.0000379539863047,1.9913304227324393,-0.9934105048680147,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,1.9943395180926169,-0.9953666489751429
    };
    /* Band 3: 433.3 Hz - 586.7 Hz */
    static constexpr std::array<float, 10> bandpass_3_coeffs
    {
        0.0000501520001810,0.0001003040003621,0.0000501520001810,1.9873013803428463,-0.9927949617148740,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,1.9908744332967674,-0.9943037475111611
    };
    /* Band 4: 673.3 Hz - 866.7 Hz */
    static constexpr std::array<float, 10> bandpass_4_coeffs
    {
        0.0000795975516491,0.0001591951032983,0.0000795975516491,1.9789789818375048,-0.9910833370302929,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,1.9844842668446341,-0.9926636620544383
    };
    /* Band 5: 968.3 Hz - 1201.7 Hz */
    static constexpr std::array<float, 10> bandpass_5_coeffs
    {
        0.0001157475894429,0.0002314951788859,0.0001157475894429,1.9659732535409122,-0.9893886906324293,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,1.9742565369730842,-0.9910123883335586
    };
    /* Band 6: 1335.0 Hz - 1635.0 Hz */
    static constexpr std::array<float, 10> bandpass_6_coeffs
    {
        0.0001908051588071,0.0003816103176143,0.0001908051588071,1.9431097594135882,-0.9864471804484846,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,1.9567160092318616,-0.9883905676357779
    };
    /* Band 7: 1800.0 Hz - 2200.0 Hz */
    static constexpr std::array<float, 10> bandpass_7_coeffs
    {
        0.0003377978304801,0.0006755956609603,0.0003377978304801,1.9039024392168118,-0.9819978810498541,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,1.9272034591502889,-0.9845257027562279
    };
    /* Band 8: 2423.3 Hz - 2976.7 Hz */
    static constexpr std::array<float, 10> bandpass_8_coeffs
    {
        0.0006423133922195,0.0012846267844389,0.0006423133922195,1.8336237349658846,-0.9751779970682559,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,1.8753658156426636,-0.9786696829916107
    };
    /* Band 9: 3283.3 Hz - 4116.7 Hz */
    static constexpr std::array<float, 10> bandpass_9_coeffs
    {
        0.0014401429159117,0.0028802858318234,0.0014401429159117,1.6977525758534082,-0.9627187200001374,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,1.7800918320216652,-0.9682120680931674
    };
    /* Band 10: 4633.3 Hz - 5966.7 Hz */
    static constexpr std::array<float, 10> bandpass_10_coeffs
    {
        0.0036128140876369,0.0072256281752737,0.0036128140876369,1.4070361033177190,-0.9410182842410210,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,1.5823066667489376,-0.9497466950908128
    };
    /* Band 11: 6716.7 Hz - 8783.3 Hz */
    static constexpr std::array<float, 10> bandpass_11_coeffs
    {
        0.0084321756959030,0.0168643513918060,0.0084321756959030,0.8367128297956602,-0.9115542036316240,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,1.1846634315498743,-0.9221076579549065
    };
    /* Band 12: 10000.0 Hz - 14000.0 Hz */
    static constexpr std::array<float, 10> bandpass_12_coeffs
    {
        0.0294073894383701,0.0588147788767403,0.0294073894383701,-0.3778552401880538,-0.8470896205400362,
        1.0000000000000000,-2.0000000000000000,1.0000000000000000,0.3778552401880536,-0.8470896205400364
    };

    static constexpr std::array<std::array<float, 10>, bands> bandpass_coeffs
    {
        bandpass_1_coeffs,
        bandpass_2_coeffs,
        bandpass_3_coeffs,
        bandpass_4_coeffs,
        bandpass_5_coeffs,
        bandpass_6_coeffs,
        bandpass_7_coeffs,
        bandpass_8_coeffs,
        bandpass_9_coeffs,
        bandpass_10_coeffs,
        bandpass_11_coeffs,
        bandpass_12_coeffs,
    };

    std::array<libs::adsp::iir_biquad<2>, bands> car_bpf;
    std::array<libs::adsp::iir_biquad<1>, bands> car_lpf;
    std::array<float, mfx::config::dsp_vector_size> car_env, car_bp;

    std::array<libs::adsp::iir_biquad<2>, bands> mod_bpf;
    std::array<libs::adsp::iir_biquad<1>, bands> mod_lpf;
    std::array<float, mfx::config::dsp_vector_size> mod_env;
    std::array<float, bands> mod_hold;

    vocoder_attr &attr;
};

/* Modern vocoder (STFT) */
class vocoder::modern_vocoder
{
public:
    modern_vocoder(vocoder_attr &attributes) : attr {attributes}
    {
        arm_rfft_fast_init_f32(&this->fft, this->window_size);
        arm_rfft_fast_init_f32(&this->fft_filter, this->window_size / 2);

        arm_fill_f32(0, this->car_input.data(), this->car_input.size());
        arm_fill_f32(0, this->mod_input.data(), this->mod_input.size());
        arm_fill_f32(0, this->output.data(), this->output.size());
    }

    void process(const dsp_input &car, const dsp_input &mod, dsp_output &out)
    {
        constexpr unsigned block_size = config::dsp_vector_size;
        constexpr unsigned move_size = this->window_size - block_size;

        float *cenv_in = this->car_env.data();
        float *cenv_out = this->car_env.data() + this->window_size;
        float *menv_in = this->mod_env.data();
        float *menv_out = this->mod_env.data() + this->window_size;

        /* Sliding window of input signal chunks */
        arm_copy_f32(this->car_input.data() + block_size, this->car_input.data(), move_size);
        arm_copy_f32(const_cast<float*>(car.data()), this->car_input.data() + move_size, block_size);

        if (!this->attr.ctrl.hold)
        {
            arm_copy_f32(this->mod_input.data() + block_size, this->mod_input.data(), move_size);
            arm_copy_f32(const_cast<float*>(mod.data()), this->mod_input.data() + move_size, block_size);
        }

        /* Windowing */
        arm_mult_f32(this->car_input.data(), const_cast<float*>(this->window_hann.data()), cenv_in, this->window_size);
        arm_mult_f32(this->mod_input.data(), const_cast<float*>(this->window_hann.data()), menv_in, this->window_size);

        /* STFT of sliding window */
        arm_rfft_fast_f32(&this->fft, cenv_in, cenv_out, 0);
        arm_rfft_fast_f32(&this->fft, menv_in, menv_out, 0);
        std::swap(cenv_in, cenv_out);
        std::swap(menv_in, menv_out);

        /* Save carrier's STFT */
        arm_copy_f32(cenv_in, this->car_stfft.data(), this->window_size);

        /* Squared envelope */
        arm_cmplx_mag_squared_f32(cenv_in + 2, cenv_out + 1, this->window_size / 2 - 1);
        arm_cmplx_mag_squared_f32(menv_in + 2, menv_out + 1, this->window_size / 2 - 1);
        cenv_out[0] = cenv_in[1] * cenv_in[1]; // DC
        menv_out[0] = menv_in[1] * menv_in[1]; // DC
        std::swap(cenv_in, cenv_out);
        std::swap(menv_in, menv_out);

        /* Envelope smoothing (circular convolution using FFT, half the window size) */
        float *filt = this->filter.data() + this->window_size / 2;

        arm_rfft_fast_f32(&this->fft_filter, cenv_in, cenv_out, 0);
        std::swap(cenv_in, cenv_out);
        arm_cmplx_mult_cmplx_f32(cenv_in + 2, filt + 2, cenv_out + 2, this->window_size / 4 - 1);
        cenv_out[0] = cenv_in[0] * filt[0]; // DC
        cenv_out[1] = cenv_in[1] * filt[1]; // Nyquist
        std::swap(cenv_in, cenv_out);
        arm_rfft_fast_f32(&this->fft_filter, cenv_in, cenv_out, 1);
        std::swap(cenv_in, cenv_out);

        arm_rfft_fast_f32(&this->fft_filter, menv_in, menv_out, 0);
        std::swap(menv_in, menv_out);
        arm_cmplx_mult_cmplx_f32(menv_in + 2, filt + 2, menv_out + 2, this->window_size / 4 - 1);
        menv_out[0] = menv_in[0] * filt[0]; // DC
        menv_out[1] = menv_in[1] * filt[1]; // Nyquist
        std::swap(menv_in, menv_out);
        arm_rfft_fast_f32(&this->fft_filter, menv_in, menv_out, 1);
        std::swap(menv_in, menv_out);

        /* Cross-synthesis */
        const float epsi = (0.1f - 0.1f * this->attr.ctrl.clarity); // To avoid dividing by 0
        for (unsigned i = 0; i < (this->window_size / 2); i++)
            arm_sqrt_f32(std::abs(menv_in[i]) / (std::abs(cenv_in[i]) + epsi), &cenv_out[i]);
        std::swap(cenv_in, cenv_out);

        arm_cmplx_mult_real_f32(this->car_stfft.data(), cenv_in, cenv_out, this->window_size / 2);
        std::swap(cenv_in, cenv_out);

        /* Inverse STFT & optional windowing */
        arm_rfft_fast_f32(&this->fft, cenv_in, cenv_out, 1);
        std::swap(cenv_in, cenv_out);

        /* Overlap-add */
        arm_copy_f32(this->output.data() + block_size, this->output.data(), move_size);
        arm_fill_f32(0, this->output.data() + move_size, block_size);
        arm_add_f32(this->output.data(), cenv_in, this->output.data(), this->window_size);

        /* Copy result to output */
        arm_copy_f32(this->output.data(), out.data(), block_size);
    }

    void change_bands(unsigned bands)
    {
        /*
         * Hanning window generation for bandpass filtering in frequency domain. Channel bandwidth is: nch * fs / window_size
         * It's equivalent to MATLAB's syntax:
         *
         * h = hanning(nob, 'periodic')
         * fftshift([zeros((window_size/2-nob)/2,1); h/sum(h); zeros((window_size/2-nob)/2,1)])
         */

       arm_fill_f32(0, this->filter.data(), this->window_size);
       const unsigned nob = this->window_size / bands;
       assert(nob % 2 == 0);

       const float k = 2.0f / nob;
       const unsigned half_nob = nob / 2;
       for (unsigned i = 0; i < nob; i++)
       {
           float w = libs::adsp::pi * (i + 1) * k;
           w = (0.5f * (1.0f - std::cos(w))) * k;
           if (i < half_nob)
               this->filter[half_nob - 1 - i] = w;
           else
               this->filter[this->window_size / 2 + half_nob - 1 - i] = w;
       }

       arm_rfft_fast_f32(&this->fft_filter, this->filter.data(), this->filter.data() + this->window_size / 2, 0);
}

    constexpr static unsigned bands_variants {6};

private:
    constexpr static unsigned window_size {1024};

    /* Hanning window for 7/8 overlap */
        constexpr static std::array<float, 1024> window_hann
        {
            0.0000000000000000,    0.0000023530896749,    0.0000094122701069,
            0.0000211772755221,    0.0000376476629745,    0.0000588228123634,
            0.0000847019264563,    0.0001152840309193,    0.0001505679743534,
            0.0001905524283382,    0.0002352358874814,    0.0002846166694760,
            0.0003386929151637,    0.0003974625886043,    0.0004609234771527,
            0.0005290731915425,    0.0006019091659754,    0.0006794286582181,
            0.0007616287497055,    0.0008485063456507,    0.0009400581751613,
            0.0010362807913626,    0.0011371705715275,    0.0012427237172129,
            0.0013529362544024,    0.0014678040336563,    0.0015873227302677,
            0.0017114878444252,    0.0018402947013823,    0.0019737384516339,
            0.0021118140710980,    0.0022545163613056,    0.0024018399495962,
            0.0025537792893199,    0.0027103286600465,    0.0028714821677807,
            0.0030372337451839,    0.0032075771518030,    0.0033825059743050,
            0.0035620136267185,    0.0037460933506820,    0.0039347382156978,
            0.0041279411193935,    0.0043256947877888,    0.0045279917755700,
            0.0047348244663698,    0.0049461850730543,    0.0051620656380161,
            0.0053824580334739,    0.0056073539617787,    0.0058367449557258,
            0.0060706223788740,    0.0063089774258704,    0.0065518011227824,
            0.0067990843274348,    0.0070508177297550,    0.0073069918521224,
            0.0075675970497263,    0.0078326235109281,    0.0081020612576315,
            0.0083759001456576,    0.0086541298651270,    0.0089367399408481,
            0.0092237197327111,    0.0095150584360892,    0.0098107450822447,
            0.0101107685387428,    0.0104151175098697,    0.0107237805370587,
            0.0110367459993213,    0.0113540021136847,    0.0116755369356356,
            0.0120013383595696,    0.0123313941192472,    0.0126656917882558,
            0.0130042187804768,    0.0133469623505606,    0.0136939095944053,
            0.0140450474496433,    0.0144003626961328,    0.0147598419564556,
            0.0151234716964208,    0.0154912382255742,    0.0158631276977137,
            0.0162391261114111,    0.0166192193105384,    0.0170033929848016,
            0.0173916326702791,    0.0177839237499660,    0.0181802514543249,
            0.0185806008618419,    0.0189849568995878,    0.0193933043437866,
            0.0198056278203877,    0.0202219118056452,    0.0206421406267025,
            0.0210662984621818,    0.0214943693427805,    0.0219263371518718,
            0.0223621856261119,    0.0228018983560520,    0.0232454587867564,
            0.0236928502184257,    0.0241440558070251,    0.0245990585649194,
            0.0250578413615119,    0.0255203869238896,    0.0259866778374735,
            0.0264566965466742,    0.0269304253555531,    0.0274078464284882,
            0.0278889417908459,    0.0283736933296579,    0.0288620827943025,
            0.0293540917971926,    0.0298497018144673,    0.0303488941866894,
            0.0308516501195484,    0.0313579506845676,    0.0318677768198167,
            0.0323811093306301,    0.0328979288903288,    0.0334182160409484,
            0.0339419511939719,    0.0344691146310666,    0.0349996865048273,
            0.0355336468395227,    0.0360709755318479,    0.0366116523516816,
            0.0371556569428468,    0.0377029688238784,    0.0382535673887932,
            0.0388074319078666,    0.0393645415284125,    0.0399248752755684,
            0.0404884120530855,    0.0410551306441227,    0.0416250097120453,
            0.0421980278012285,    0.0427741633378652,    0.0433533946307779,
            0.0439356998722359,    0.0445210571387761,    0.0451094443920280,
            0.0457008394795443,    0.0462952201356341,    0.0468925639822017,
            0.0474928485295888,    0.0480960511774216,    0.0487021492154613,
            0.0493111198244593,    0.0499229400770164,    0.0505375869384458,
            0.0511550372676407,    0.0517752678179451,    0.0523982552380294,
            0.0530239760727693,    0.0536524067641291,    0.0542835236520483,
            0.0549173029753330,    0.0555537208725497,    0.0561927533829244,
            0.0568343764472442,    0.0574785659087634,    0.0581252975141128,
            0.0587745469142131,    0.0594262896651914,    0.0600805012293013,
            0.0607371569758473,    0.0613962321821116,    0.0620577020342853,
            0.0627215416284023,    0.0633877259712770,    0.0640562299814455,
            0.0647270284901096,    0.0654000962420847,    0.0660754078967503,
            0.0667529380290042,    0.0674326611302200,    0.0681145516092070,
            0.0687985837931742,    0.0694847319286963,    0.0701729701826840,
            0.0708632726433560,    0.0715556133212147,    0.0722499661500250,
            0.0729463049877953,    0.0736446036177620,    0.0743448357493763,
            0.0750469750192942,    0.0757509949923690,    0.0764568691626467,
            0.0771645709543638,    0.0778740737229477,    0.0785853507560203,
            0.0792983752744033,    0.0800131204331265,    0.0807295593224387,
            0.0814476649688207,    0.0821674103360007,    0.0828887683259725,
            0.0836117117800154,    0.0843362134797171,    0.0850622461479980,
            0.0857897824501385,    0.0865187949948081,    0.0872492563350965,
            0.0879811389695470,    0.0887144153431922,    0.0894490578485910,
            0.0901850388268684,    0.0909223305687564,    0.0916609053156377,
            0.0924007352605906,    0.0931417925494357,    0.0938840492817850,
            0.0946274775120920,    0.0953720492507041,    0.0961177364649161,
            0.0968645110800259,    0.0976123449803913,    0.0983612100104886,
            0.0991110779759727,    0.0998619206447385,    0.1006137097479840,
            0.1013664169812742,    0.1021200140056074,    0.1028744724484814,
            0.1036297639049623,    0.1043858599387537,    0.1051427320832673,
            0.1059003518426946,    0.1066586906930798,    0.1074177200833938,
            0.1081774114366092,    0.1089377361507758,    0.1096986656000980,
            0.1104601711360119,    0.1112222240882646,    0.1119847957659932,
            0.1127478574588049,    0.1135113804378584,    0.1142753359569450,
            0.1150396952535712,    0.1158044295500416,    0.1165695100545420,
            0.1173349079622239,    0.1181005944562887,    0.1188665407090727,
            0.1196327178831324,    0.1203990971323301,    0.1211656496029204,
            0.1219323464346360,    0.1226991587617744,    0.1234660577142850,
            0.1242330144188557,    0.1250000000000000,    0.1257669855811443,
            0.1265339422857150,    0.1273008412382256,    0.1280676535653640,
            0.1288343503970796,    0.1296009028676699,    0.1303672821168676,
            0.1311334592909273,    0.1318994055437112,    0.1326650920377761,
            0.1334304899454580,    0.1341955704499584,    0.1349603047464288,
            0.1357246640430550,    0.1364886195621416,    0.1372521425411951,
            0.1380152042340068,    0.1387777759117354,    0.1395398288639881,
            0.1403013343999020,    0.1410622638492241,    0.1418225885633908,
            0.1425822799166061,    0.1433413093069202,    0.1440996481573054,
            0.1448572679167326,    0.1456141400612462,    0.1463702360950377,
            0.1471255275515186,    0.1478799859943926,    0.1486335830187258,
            0.1493862902520160,    0.1501380793552615,    0.1508889220240273,
            0.1516387899895114,    0.1523876550196087,    0.1531354889199741,
            0.1538822635350839,    0.1546279507492959,    0.1553725224879080,
            0.1561159507182150,    0.1568582074505643,    0.1575992647394094,
            0.1583390946843623,    0.1590776694312436,    0.1598149611731316,
            0.1605509421514090,    0.1612855846568078,    0.1620188610304530,
            0.1627507436649035,    0.1634812050051919,    0.1642102175498614,
            0.1649377538520020,    0.1656637865202829,    0.1663882882199845,
            0.1671112316740275,    0.1678325896639993,    0.1685523350311793,
            0.1692704406775613,    0.1699868795668735,    0.1707016247255967,
            0.1714146492439797,    0.1721259262770523,    0.1728354290456362,
            0.1735431308373533,    0.1742490050076310,    0.1749530249807058,
            0.1756551642506237,    0.1763553963822380,    0.1770536950122046,
            0.1777500338499750,    0.1784443866787852,    0.1791367273566440,
            0.1798270298173159,    0.1805152680713036,    0.1812014162068258,
            0.1818854483907930,    0.1825673388697800,    0.1832470619709957,
            0.1839245921032497,    0.1845999037579152,    0.1852729715098903,
            0.1859437700185545,    0.1866122740287230,    0.1872784583715977,
            0.1879422979657147,    0.1886037678178884,    0.1892628430241527,
            0.1899194987706987,    0.1905737103348086,    0.1912254530857868,
            0.1918747024858871,    0.1925214340912366,    0.1931656235527558,
            0.1938072466170756,    0.1944462791274502,    0.1950826970246670,
            0.1957164763479516,    0.1963475932358709,    0.1969760239272307,
            0.1976017447619706,    0.1982247321820549,    0.1988449627323592,
            0.1994624130615542,    0.2000770599229836,    0.2006888801755407,
            0.2012978507845387,    0.2019039488225783,    0.2025071514704112,
            0.2031074360177983,    0.2037047798643659,    0.2042991605204557,
            0.2048905556079720,    0.2054789428612239,    0.2060643001277641,
            0.2066466053692221,    0.2072258366621348,    0.2078019721987715,
            0.2083749902879547,    0.2089448693558773,    0.2095115879469145,
            0.2100751247244316,    0.2106354584715875,    0.2111925680921334,
            0.2117464326112067,    0.2122970311761216,    0.2128443430571531,
            0.2133883476483184,    0.2139290244681521,    0.2144663531604773,
            0.2150003134951727,    0.2155308853689333,    0.2160580488060281,
            0.2165817839590516,    0.2171020711096712,    0.2176188906693698,
            0.2181322231801832,    0.2186420493154324,    0.2191483498804516,
            0.2196511058133106,    0.2201502981855327,    0.2206459082028074,
            0.2211379172056974,    0.2216263066703421,    0.2221110582091541,
            0.2225921535715118,    0.2230695746444469,    0.2235433034533258,
            0.2240133221625265,    0.2244796130761104,    0.2249421586384882,
            0.2254009414350806,    0.2258559441929749,    0.2263071497815743,
            0.2267545412132436,    0.2271981016439479,    0.2276378143738881,
            0.2280736628481281,    0.2285056306572195,    0.2289337015378182,
            0.2293578593732975,    0.2297780881943547,    0.2301943721796123,
            0.2306066956562134,    0.2310150431004122,    0.2314193991381581,
            0.2318197485456751,    0.2322160762500340,    0.2326083673297209,
            0.2329966070151983,    0.2333807806894616,    0.2337608738885889,
            0.2341368723022862,    0.2345087617744258,    0.2348765283035792,
            0.2352401580435444,    0.2355996373038672,    0.2359549525503567,
            0.2363060904055947,    0.2366530376494394,    0.2369957812195231,
            0.2373343082117442,    0.2376686058807527,    0.2379986616404304,
            0.2383244630643644,    0.2386459978863153,    0.2389632540006787,
            0.2392762194629413,    0.2395848824901303,    0.2398892314612572,
            0.2401892549177552,    0.2404849415639108,    0.2407762802672889,
            0.2410632600591519,    0.2413458701348730,    0.2416240998543424,
            0.2418979387423685,    0.2421673764890719,    0.2424324029502737,
            0.2426930081478776,    0.2429491822702450,    0.2432009156725651,
            0.2434481988772176,    0.2436910225741296,    0.2439293776211260,
            0.2441632550442742,    0.2443926460382213,    0.2446175419665261,
            0.2448379343619839,    0.2450538149269457,    0.2452651755336302,
            0.2454720082244300,    0.2456743052122112,    0.2458720588806065,
            0.2460652617843022,    0.2462539066493180,    0.2464379863732815,
            0.2466174940256950,    0.2467924228481970,    0.2469627662548161,
            0.2471285178322193,    0.2472896713399534,    0.2474462207106801,
            0.2475981600504038,    0.2477454836386944,    0.2478881859289020,
            0.2480262615483661,    0.2481597052986176,    0.2482885121555748,
            0.2484126772697323,    0.2485321959663437,    0.2486470637455976,
            0.2487572762827871,    0.2488628294284725,    0.2489637192086374,
            0.2490599418248388,    0.2491514936543493,    0.2492383712502945,
            0.2493205713417819,    0.2493980908340246,    0.2494709268084575,
            0.2495390765228472,    0.2496025374113957,    0.2496613070848363,
            0.2497153833305240,    0.2497647641125186,    0.2498094475716618,
            0.2498494320256466,    0.2498847159690807,    0.2499152980735437,
            0.2499411771876366,    0.2499623523370255,    0.2499788227244779,
            0.2499905877298931,    0.2499976469103251,    0.2500000000000000,
            0.2499976469103251,    0.2499905877298931,    0.2499788227244779,
            0.2499623523370255,    0.2499411771876366,    0.2499152980735437,
            0.2498847159690807,    0.2498494320256466,    0.2498094475716618,
            0.2497647641125186,    0.2497153833305240,    0.2496613070848363,
            0.2496025374113957,    0.2495390765228472,    0.2494709268084575,
            0.2493980908340246,    0.2493205713417819,    0.2492383712502945,
            0.2491514936543493,    0.2490599418248388,    0.2489637192086374,
            0.2488628294284725,    0.2487572762827872,    0.2486470637455976,
            0.2485321959663437,    0.2484126772697323,    0.2482885121555748,
            0.2481597052986177,    0.2480262615483662,    0.2478881859289020,
            0.2477454836386944,    0.2475981600504038,    0.2474462207106801,
            0.2472896713399534,    0.2471285178322193,    0.2469627662548161,
            0.2467924228481970,    0.2466174940256950,    0.2464379863732815,
            0.2462539066493180,    0.2460652617843022,    0.2458720588806065,
            0.2456743052122112,    0.2454720082244300,    0.2452651755336302,
            0.2450538149269457,    0.2448379343619839,    0.2446175419665261,
            0.2443926460382214,    0.2441632550442742,    0.2439293776211260,
            0.2436910225741296,    0.2434481988772176,    0.2432009156725652,
            0.2429491822702450,    0.2426930081478776,    0.2424324029502737,
            0.2421673764890719,    0.2418979387423685,    0.2416240998543424,
            0.2413458701348730,    0.2410632600591520,    0.2407762802672889,
            0.2404849415639109,    0.2401892549177552,    0.2398892314612572,
            0.2395848824901303,    0.2392762194629413,    0.2389632540006787,
            0.2386459978863153,    0.2383244630643644,    0.2379986616404304,
            0.2376686058807528,    0.2373343082117443,    0.2369957812195231,
            0.2366530376494394,    0.2363060904055947,    0.2359549525503568,
            0.2355996373038672,    0.2352401580435444,    0.2348765283035792,
            0.2345087617744258,    0.2341368723022863,    0.2337608738885889,
            0.2333807806894616,    0.2329966070151984,    0.2326083673297209,
            0.2322160762500340,    0.2318197485456751,    0.2314193991381582,
            0.2310150431004122,    0.2306066956562134,    0.2301943721796123,
            0.2297780881943548,    0.2293578593732975,    0.2289337015378182,
            0.2285056306572195,    0.2280736628481282,    0.2276378143738881,
            0.2271981016439480,    0.2267545412132436,    0.2263071497815743,
            0.2258559441929749,    0.2254009414350806,    0.2249421586384882,
            0.2244796130761104,    0.2240133221625265,    0.2235433034533258,
            0.2230695746444469,    0.2225921535715118,    0.2221110582091541,
            0.2216263066703421,    0.2211379172056975,    0.2206459082028074,
            0.2201502981855327,    0.2196511058133106,    0.2191483498804516,
            0.2186420493154324,    0.2181322231801833,    0.2176188906693699,
            0.2171020711096713,    0.2165817839590516,    0.2160580488060282,
            0.2155308853689334,    0.2150003134951727,    0.2144663531604774,
            0.2139290244681521,    0.2133883476483185,    0.2128443430571532,
            0.2122970311761216,    0.2117464326112067,    0.2111925680921334,
            0.2106354584715875,    0.2100751247244317,    0.2095115879469145,
            0.2089448693558773,    0.2083749902879547,    0.2078019721987715,
            0.2072258366621348,    0.2066466053692221,    0.2060643001277640,
            0.2054789428612239,    0.2048905556079720,    0.2042991605204557,
            0.2037047798643659,    0.2031074360177983,    0.2025071514704112,
            0.2019039488225784,    0.2012978507845387,    0.2006888801755407,
            0.2000770599229837,    0.1994624130615542,    0.1988449627323593,
            0.1982247321820549,    0.1976017447619706,    0.1969760239272307,
            0.1963475932358709,    0.1957164763479517,    0.1950826970246671,
            0.1944462791274503,    0.1938072466170756,    0.1931656235527558,
            0.1925214340912366,    0.1918747024858872,    0.1912254530857869,
            0.1905737103348087,    0.1899194987706987,    0.1892628430241527,
            0.1886037678178884,    0.1879422979657148,    0.1872784583715977,
            0.1866122740287230,    0.1859437700185546,    0.1852729715098903,
            0.1845999037579153,    0.1839245921032497,    0.1832470619709958,
            0.1825673388697800,    0.1818854483907930,    0.1812014162068259,
            0.1805152680713037,    0.1798270298173160,    0.1791367273566440,
            0.1784443866787853,    0.1777500338499750,    0.1770536950122046,
            0.1763553963822380,    0.1756551642506238,    0.1749530249807058,
            0.1742490050076310,    0.1735431308373533,    0.1728354290456363,
            0.1721259262770523,    0.1714146492439797,    0.1707016247255968,
            0.1699868795668735,    0.1692704406775613,    0.1685523350311794,
            0.1678325896639994,    0.1671112316740275,    0.1663882882199846,
            0.1656637865202829,    0.1649377538520019,    0.1642102175498614,
            0.1634812050051919,    0.1627507436649036,    0.1620188610304530,
            0.1612855846568078,    0.1605509421514090,    0.1598149611731317,
            0.1590776694312436,    0.1583390946843623,    0.1575992647394095,
            0.1568582074505643,    0.1561159507182150,    0.1553725224879080,
            0.1546279507492960,    0.1538822635350839,    0.1531354889199741,
            0.1523876550196088,    0.1516387899895115,    0.1508889220240273,
            0.1501380793552615,    0.1493862902520161,    0.1486335830187258,
            0.1478799859943926,    0.1471255275515186,    0.1463702360950377,
            0.1456141400612462,    0.1448572679167327,    0.1440996481573055,
            0.1433413093069203,    0.1425822799166062,    0.1418225885633908,
            0.1410622638492242,    0.1403013343999020,    0.1395398288639881,
            0.1387777759117354,    0.1380152042340069,    0.1372521425411951,
            0.1364886195621416,    0.1357246640430550,    0.1349603047464288,
            0.1341955704499584,    0.1334304899454580,    0.1326650920377761,
            0.1318994055437112,    0.1311334592909273,    0.1303672821168676,
            0.1296009028676699,    0.1288343503970796,    0.1280676535653640,
            0.1273008412382257,    0.1265339422857151,    0.1257669855811443,
            0.1250000000000000,    0.1242330144188557,    0.1234660577142850,
            0.1226991587617744,    0.1219323464346360,    0.1211656496029205,
            0.1203990971323301,    0.1196327178831324,    0.1188665407090728,
            0.1181005944562888,    0.1173349079622239,    0.1165695100545420,
            0.1158044295500416,    0.1150396952535712,    0.1142753359569450,
            0.1135113804378584,    0.1127478574588050,    0.1119847957659932,
            0.1112222240882646,    0.1104601711360119,    0.1096986656000981,
            0.1089377361507758,    0.1081774114366092,    0.1074177200833939,
            0.1066586906930798,    0.1059003518426946,    0.1051427320832674,
            0.1043858599387538,    0.1036297639049623,    0.1028744724484814,
            0.1021200140056074,    0.1013664169812743,    0.1006137097479840,
            0.0998619206447385,    0.0991110779759727,    0.0983612100104886,
            0.0976123449803913,    0.0968645110800259,    0.0961177364649162,
            0.0953720492507041,    0.0946274775120920,    0.0938840492817850,
            0.0931417925494357,    0.0924007352605906,    0.0916609053156377,
            0.0909223305687564,    0.0901850388268683,    0.0894490578485910,
            0.0887144153431922,    0.0879811389695471,    0.0872492563350965,
            0.0865187949948082,    0.0857897824501386,    0.0850622461479981,
            0.0843362134797171,    0.0836117117800155,    0.0828887683259726,
            0.0821674103360007,    0.0814476649688207,    0.0807295593224387,
            0.0800131204331266,    0.0792983752744033,    0.0785853507560203,
            0.0778740737229478,    0.0771645709543637,    0.0764568691626467,
            0.0757509949923690,    0.0750469750192942,    0.0743448357493763,
            0.0736446036177620,    0.0729463049877954,    0.0722499661500251,
            0.0715556133212147,    0.0708632726433560,    0.0701729701826841,
            0.0694847319286963,    0.0687985837931742,    0.0681145516092070,
            0.0674326611302201,    0.0667529380290042,    0.0660754078967503,
            0.0654000962420848,    0.0647270284901097,    0.0640562299814455,
            0.0633877259712770,    0.0627215416284023,    0.0620577020342853,
            0.0613962321821116,    0.0607371569758473,    0.0600805012293014,
            0.0594262896651914,    0.0587745469142132,    0.0581252975141129,
            0.0574785659087634,    0.0568343764472442,    0.0561927533829244,
            0.0555537208725498,    0.0549173029753330,    0.0542835236520484,
            0.0536524067641291,    0.0530239760727694,    0.0523982552380294,
            0.0517752678179452,    0.0511550372676408,    0.0505375869384459,
            0.0499229400770164,    0.0493111198244593,    0.0487021492154614,
            0.0480960511774216,    0.0474928485295889,    0.0468925639822017,
            0.0462952201356342,    0.0457008394795443,    0.0451094443920280,
            0.0445210571387761,    0.0439356998722360,    0.0433533946307779,
            0.0427741633378652,    0.0421980278012286,    0.0416250097120453,
            0.0410551306441227,    0.0404884120530855,    0.0399248752755684,
            0.0393645415284124,    0.0388074319078666,    0.0382535673887933,
            0.0377029688238785,    0.0371556569428468,    0.0366116523516816,
            0.0360709755318480,    0.0355336468395226,    0.0349996865048273,
            0.0344691146310667,    0.0339419511939719,    0.0334182160409484,
            0.0328979288903288,    0.0323811093306301,    0.0318677768198168,
            0.0313579506845676,    0.0308516501195485,    0.0303488941866895,
            0.0298497018144673,    0.0293540917971926,    0.0288620827943026,
            0.0283736933296579,    0.0278889417908459,    0.0274078464284882,
            0.0269304253555531,    0.0264566965466743,    0.0259866778374735,
            0.0255203869238896,    0.0250578413615119,    0.0245990585649194,
            0.0241440558070251,    0.0236928502184257,    0.0232454587867565,
            0.0228018983560520,    0.0223621856261119,    0.0219263371518719,
            0.0214943693427806,    0.0210662984621818,    0.0206421406267025,
            0.0202219118056453,    0.0198056278203877,    0.0193933043437866,
            0.0189849568995879,    0.0185806008618419,    0.0181802514543249,
            0.0177839237499660,    0.0173916326702791,    0.0170033929848017,
            0.0166192193105384,    0.0162391261114111,    0.0158631276977138,
            0.0154912382255742,    0.0151234716964208,    0.0147598419564556,
            0.0144003626961328,    0.0140450474496433,    0.0136939095944053,
            0.0133469623505606,    0.0130042187804769,    0.0126656917882558,
            0.0123313941192473,    0.0120013383595696,    0.0116755369356356,
            0.0113540021136847,    0.0110367459993213,    0.0107237805370587,
            0.0104151175098697,    0.0101107685387428,    0.0098107450822448,
            0.0095150584360892,    0.0092237197327111,    0.0089367399408481,
            0.0086541298651271,    0.0083759001456576,    0.0081020612576316,
            0.0078326235109281,    0.0075675970497263,    0.0073069918521224,
            0.0070508177297550,    0.0067990843274349,    0.0065518011227823,
            0.0063089774258704,    0.0060706223788740,    0.0058367449557258,
            0.0056073539617787,    0.0053824580334739,    0.0051620656380161,
            0.0049461850730543,    0.0047348244663698,    0.0045279917755700,
            0.0043256947877888,    0.0041279411193935,    0.0039347382156978,
            0.0037460933506820,    0.0035620136267185,    0.0033825059743050,
            0.0032075771518030,    0.0030372337451839,    0.0028714821677807,
            0.0027103286600465,    0.0025537792893199,    0.0024018399495962,
            0.0022545163613056,    0.0021118140710980,    0.0019737384516339,
            0.0018402947013824,    0.0017114878444252,    0.0015873227302677,
            0.0014678040336563,    0.0013529362544024,    0.0012427237172129,
            0.0011371705715275,    0.0010362807913626,    0.0009400581751613,
            0.0008485063456507,    0.0007616287497055,    0.0006794286582181,
            0.0006019091659754,    0.0005290731915425,    0.0004609234771527,
            0.0003974625886043,    0.0003386929151637,    0.0002846166694760,
            0.0002352358874814,    0.0001905524283382,    0.0001505679743534,
            0.0001152840309193,    0.0000847019264563,    0.0000588228123634,
            0.0000376476629745,    0.0000211772755221,    0.0000094122701069,
            0.0000023530896749,
    };

    arm_rfft_fast_instance_f32 fft, fft_filter;
    std::array<float, 2 * window_size> car_env, mod_env;
    std::array<float, window_size> car_input, car_stfft, mod_input, output, filter;

    vocoder_attr &attr;
};

//-----------------------------------------------------------------------------
/* public */

vocoder::vocoder(float clarity, float tone, unsigned channels, vocoder_attr::controls::mode_type mode) : effect {effect_id::vocoder},
vintage {std::make_unique<vintage_vocoder>(attr)}, modern {std::make_unique<modern_vocoder>(attr)}
{
    this->set_mode(mode);
    this->hold(false);
    this->set_tone(tone);
    this->set_clarity(clarity);
    this->set_channels(channels);
}

vocoder::~vocoder()
{

}

void vocoder::process(const dsp_input& in, dsp_output& out)
{
    if (this->aux_in == nullptr)
        return;

    this->hp.process(this->aux_in->data(), const_cast<float*>(this->aux_in->data()), this->aux_in->size());

    if (this->attr.ctrl.mode == vocoder_attr::controls::mode_type::vintage)
    {
        this->vintage->process(in, *this->aux_in, out);
    }
    else
    {
        this->modern->process(in, *this->aux_in, out);
    }
}

const effect_specific_attributes vocoder::get_specific_attributes(void) const
{
    return this->attr;
}

void vocoder::set_mode(vocoder_attr::controls::mode_type mode)
{
    if (this->attr.ctrl.mode == mode)
        return;

    if (mode == vocoder_attr::controls::mode_type::vintage)
    {
        this->attr.bands_list.resize(1);
        this->attr.bands_list.at(0) = this->vintage->bands;
    }
    else
    {
        this->attr.bands_list.resize(this->modern->bands_variants);
        for (unsigned i = 0; i < this->modern->bands_variants; i++)
            this->attr.bands_list.at(i) = (1U << (3U + i));

        this->attr.ctrl.bands = 0; // Reset bands number to trigger set_channels()
    }

    this->attr.ctrl.mode = mode;
}

void vocoder::set_clarity(float clarity)
{
    clarity = std::clamp(clarity, 0.0f, 0.9999f);

    if (this->attr.ctrl.clarity == clarity)
        return;

    this->attr.ctrl.clarity = clarity;
}

void vocoder::set_tone(float tone)
{
    tone = std::clamp(tone, 0.0f, 1.0f);

    if (this->attr.ctrl.tone == tone)
        return;

    /* Calculate coefficient for 2nd order high-pass IIR (50Hz - 950Hz range) */
    const float fc = 50 + tone * 900;
    this->hp.calc_coeffs(fc, config::sampling_frequency_hz);

    this->attr.ctrl.tone = tone;
}

void vocoder::set_channels(unsigned ch_num)
{
    ch_num = std::clamp(ch_num, 8U, 256U);

    if (this->attr.ctrl.bands == ch_num)
        return;

    if (this->attr.ctrl.mode == vocoder_attr::controls::mode_type::vintage)
    {
        /* Number of bands is fixed */
        this->attr.ctrl.bands = this->vintage->bands;
    }
    else
    {
        /* Ceil to next power of 2 */
        this->attr.ctrl.bands = 1U << static_cast<unsigned>(std::floor(std::log2(static_cast<float>(ch_num - 1))) + 1);
        this->modern->change_bands(this->attr.ctrl.bands);
    }
}

void vocoder::hold(bool state)
{
    if (this->attr.ctrl.hold == state)
        return;

    this->attr.ctrl.hold = state;
}
