// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.1
// LVGL version: 8.3.6
// Project name: gmfx

#ifndef _GMFX_UI_H
#define _GMFX_UI_H

#ifdef __cplusplus
extern "C" {
#endif

#include "libs/lvgl/lvgl.h"

#include "ui_helpers.h"
#include "ui_events.h"
void splashfadein_Animation(lv_obj_t * TargetObject, int delay);
// SCREEN: ui_splash
void ui_splash_screen_init(void);
void ui_event_splash(lv_event_t * e);
extern lv_obj_t * ui_splash;
extern lv_obj_t * ui_lbl_splash;
// SCREEN: ui_settings
void ui_settings_screen_init(void);
void ui_event_settings(lv_event_t * e);
extern lv_obj_t * ui_settings;
extern lv_obj_t * ui_lbl_sett_name;
extern lv_obj_t * ui_pnl_in_vol;
void ui_event_sld_in_vol(lv_event_t * e);
extern lv_obj_t * ui_sld_in_vol;
extern lv_obj_t * ui_lbl_in_vol_dbmax;
extern lv_obj_t * ui_lbl_in_vol;
extern lv_obj_t * ui_pnl_out_vol;
void ui_event_sld_out_vol(lv_event_t * e);
extern lv_obj_t * ui_sld_out_vol;
extern lv_obj_t * ui_lbl_out_vol_dbmax;
extern lv_obj_t * ui_lbl_out_vol;
// SCREEN: ui_fx_tremolo
void ui_fx_tremolo_screen_init(void);
void ui_event_fx_tremolo(lv_event_t * e);
extern lv_obj_t * ui_fx_tremolo;
extern lv_obj_t * ui_lbl_trem_fx_name;
void ui_event_btn_trem_bypass(lv_event_t * e);
extern lv_obj_t * ui_btn_trem_bypass;
extern lv_obj_t * ui_lbl_btn_trem_bypass_;
extern lv_obj_t * ui_pnl_trem_controls;
extern lv_obj_t * ui_pnl_trem_rate;
extern lv_obj_t * ui_img_trem_rate;
void ui_event_arc_trem_rate(lv_event_t * e);
extern lv_obj_t * ui_arc_trem_rate;
extern lv_obj_t * ui_lbl_trem_rate;
extern lv_obj_t * ui_pnl_trem_depth;
extern lv_obj_t * ui_img_trem_depth;
void ui_event_arc_trem_depth(lv_event_t * e);
extern lv_obj_t * ui_arc_trem_depth;
extern lv_obj_t * ui_lbl_trem_depth;
extern lv_obj_t * ui_pnl_trem_shape;
extern lv_obj_t * ui_lbl_trem_shape;
void ui_event_sw_tremolo_shape(lv_event_t * e);
extern lv_obj_t * ui_sw_tremolo_shape;
extern lv_obj_t * ui_lbl_trem_triangle;
extern lv_obj_t * ui_lbl_trem_sine;
// SCREEN: ui_fx_echo
void ui_fx_echo_screen_init(void);
void ui_event_fx_echo(lv_event_t * e);
extern lv_obj_t * ui_fx_echo;
extern lv_obj_t * ui_lbl_echo_fx_name;
void ui_event_btn_echo_bypass(lv_event_t * e);
extern lv_obj_t * ui_btn_echo_bypass;
extern lv_obj_t * ui_lbl_btn_echo_bypass;
extern lv_obj_t * ui_pnl_echo_controls;
extern lv_obj_t * ui_pnl_echo_blend;
extern lv_obj_t * ui_img_echo_blend;
void ui_event_arc_echo_blend(lv_event_t * e);
extern lv_obj_t * ui_arc_echo_blend;
extern lv_obj_t * ui_lbl_echo_blend;
extern lv_obj_t * ui_pnl_echo_feedb;
extern lv_obj_t * ui_img_echo_feedb;
void ui_event_arc_echo_feedb(lv_event_t * e);
extern lv_obj_t * ui_arc_echo_feedb;
extern lv_obj_t * ui_lbl_echo_feedb;
extern lv_obj_t * ui_pnl_echo_time;
extern lv_obj_t * ui_img_echo_time;
void ui_event_arc_echo_time(lv_event_t * e);
extern lv_obj_t * ui_arc_echo_time;
extern lv_obj_t * ui_lbl_echo_time;
extern lv_obj_t * ui_pnl_echo_mode;
void ui_event_sw_echo_mode(lv_event_t * e);
extern lv_obj_t * ui_sw_echo_mode;
extern lv_obj_t * ui_lbl_echo_mode_echo;
extern lv_obj_t * ui_lbl_echo_mode_delay;
// SCREEN: ui_fx_overdrive
void ui_fx_overdrive_screen_init(void);
void ui_event_fx_overdrive(lv_event_t * e);
extern lv_obj_t * ui_fx_overdrive;
extern lv_obj_t * ui_lbl_od_fx_name;
void ui_event_btn_overdrive_bypass(lv_event_t * e);
extern lv_obj_t * ui_btn_od_bypass;
extern lv_obj_t * ui_lbl_btn_od_bypass;
extern lv_obj_t * ui_pnl_od_controls;
extern lv_obj_t * ui_pnl_od_low;
extern lv_obj_t * ui_img_od_low;
void ui_event_arc_overdrive_low(lv_event_t * e);
extern lv_obj_t * ui_arc_od_low;
extern lv_obj_t * ui_lbl_od_low;
extern lv_obj_t * ui_pnl_od_high;
extern lv_obj_t * ui_img_od_high;
void ui_event_arc_overdrive_gain(lv_event_t * e);
extern lv_obj_t * ui_arc_od_high;
extern lv_obj_t * ui_lbl_od_high;
extern lv_obj_t * ui_pnl_od_gain;
extern lv_obj_t * ui_img_od_gain;
void ui_event_arc_overdrive_high(lv_event_t * e);
extern lv_obj_t * ui_arc_od_gain;
extern lv_obj_t * ui_lbl_od_gain;
extern lv_obj_t * ui_pnl_od_mode;
void ui_event_sw_overdrive_mode(lv_event_t * e);
extern lv_obj_t * ui_sw_od_mode;
extern lv_obj_t * ui_lbl_od_mode_overdrive;
extern lv_obj_t * ui_lbl_od_mode_distortion;
void ui_event____initial_actions0(lv_event_t * e);
extern lv_obj_t * ui____initial_actions0;

LV_IMG_DECLARE(ui_img_pot_ver_line_png);    // assets/pot_ver_line.png
LV_IMG_DECLARE(ui_img_pot_ver_knob_png);    // assets/pot_ver_knob.png
LV_IMG_DECLARE(ui_img_btn_1_inact_png);    // assets/btn_1_inact.png
LV_IMG_DECLARE(ui_img_btn_1_act_png);    // assets/btn_1_act.png
LV_IMG_DECLARE(ui_img_btn_knob_png);    // assets/btn_knob.png

LV_FONT_DECLARE(ui_font_14_bold);

void ui_init(void);

#ifdef __cplusplus
} /*extern "C"*/
#endif

#endif
