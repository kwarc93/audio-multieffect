// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.1
// LVGL version: 8.3.6
// Project name: gmfx

#ifndef _GMFX_UI_H
#define _GMFX_UI_H

#ifdef __cplusplus
extern "C" {
#endif

#include "libs/lvgl/lvgl.h"

#include "ui_helpers.h"
#include "ui_events.h"

// USER:
#define UI_PALETTE_SPRING_GREEN 0x50FF7D
#define UI_PALETTE_BATTLESHIP_GRAY 0x788585

void ui_splash_fadein_anim(lv_obj_t * TargetObject, int delay);
// SCREEN: ui_splash
void ui_splash_screen_init(void);
void ui_event_splash(lv_event_t * e);
extern lv_obj_t * ui_splash;
extern lv_obj_t * ui_lbl_blank;
extern lv_obj_t * ui_lbl_blank_arrow;
// SCREEN: ui_blank
void ui_blank_screen_init(void);
void ui_event_blank(lv_event_t * e);
extern lv_obj_t * ui_blank;
extern lv_obj_t * ui_logo_gmfx;
// SCREEN: ui_settings
void ui_settings_screen_init(void);
void ui_event_settings(lv_event_t * e);
extern lv_obj_t * ui_settings;
extern lv_obj_t * ui_settings_parent_screen;
extern lv_obj_t * ui_menu_sett;
extern lv_obj_t * ui_list_sett_fx_chain;
extern lv_obj_t * ui_list_sett_fx_ops;
extern lv_obj_t * ui_list_sett_fx_items;
extern lv_obj_t * ui_btn_sett_curr_fx;
extern lv_obj_t * ui_sld_sett_in_vol;
extern lv_obj_t * ui_sld_sett_out_vol;
extern lv_obj_t * ui_sw_sett_mute_audio;
extern const char * const *ui_fx_names;
extern size_t ui_fx_names_size;
void ui_event_sld_in_vol(lv_event_t * e);
void ui_event_sld_out_vol(lv_event_t * e);
void ui_event_sw_mute_audio(lv_event_t * e);
// SCREEN: ui_fx_tremolo
void ui_fx_tremolo_screen_init(void);
void ui_event_fx_tremolo(lv_event_t * e);
extern lv_obj_t * ui_fx_tremolo;
extern lv_obj_t * ui_pnl_trem_content;
extern lv_obj_t * ui_lbl_trem_fx_name;
void ui_event_btn_trem_bypass(lv_event_t * e);
extern lv_obj_t * ui_btn_trem_bypass;
extern lv_obj_t * ui_lbl_btn_trem_bypass;
extern lv_obj_t * ui_pnl_trem_controls;
extern lv_obj_t * ui_pnl_trem_rate;
extern lv_obj_t * ui_img_trem_rate;
void ui_event_arc_trem_rate(lv_event_t * e);
extern lv_obj_t * ui_arc_trem_rate;
extern lv_obj_t * ui_lbl_trem_rate;
extern lv_obj_t * ui_pnl_trem_depth;
extern lv_obj_t * ui_img_trem_depth;
void ui_event_arc_trem_depth(lv_event_t * e);
extern lv_obj_t * ui_arc_trem_depth;
extern lv_obj_t * ui_lbl_trem_depth;
extern lv_obj_t * ui_pnl_trem_shape;
extern lv_obj_t * ui_lbl_trem_shape;
void ui_event_sw_tremolo_shape(lv_event_t * e);
extern lv_obj_t * ui_sw_trem_shape;
extern lv_obj_t * ui_lbl_trem_triangle;
extern lv_obj_t * ui_lbl_trem_sine;
// SCREEN: ui_fx_echo
void ui_fx_echo_screen_init(void);
void ui_event_fx_echo(lv_event_t * e);
extern lv_obj_t * ui_fx_echo;
extern lv_obj_t * ui_pnl_echo_content;
extern lv_obj_t * ui_lbl_echo_fx_name;
void ui_event_btn_echo_bypass(lv_event_t * e);
extern lv_obj_t * ui_btn_echo_bypass;
extern lv_obj_t * ui_lbl_btn_echo_bypass;
extern lv_obj_t * ui_pnl_echo_controls;
extern lv_obj_t * ui_pnl_echo_blur;
extern lv_obj_t * ui_img_echo_blur;
void ui_event_arc_echo_blur(lv_event_t * e);
extern lv_obj_t * ui_arc_echo_blur;
extern lv_obj_t * ui_lbl_echo_blur;
extern lv_obj_t * ui_pnl_echo_feedb;
extern lv_obj_t * ui_img_echo_feedb;
void ui_event_arc_echo_feedb(lv_event_t * e);
extern lv_obj_t * ui_arc_echo_feedb;
extern lv_obj_t * ui_lbl_echo_feedb;
extern lv_obj_t * ui_pnl_echo_time;
extern lv_obj_t * ui_img_echo_time;
void ui_event_arc_echo_time(lv_event_t * e);
extern lv_obj_t * ui_arc_echo_time;
extern lv_obj_t * ui_lbl_echo_time;
extern lv_obj_t * ui_pnl_echo_mode;
void ui_event_sw_echo_mode(lv_event_t * e);
extern lv_obj_t * ui_sw_echo_mode;
extern lv_obj_t * ui_lbl_echo_mode_echo;
extern lv_obj_t * ui_lbl_echo_mode_delay;
// SCREEN: ui_fx_chorus
void ui_fx_chorus_screen_init(void);
void ui_event_fx_chorus(lv_event_t * e);
extern lv_obj_t * ui_fx_chorus;
extern lv_obj_t * ui_pnl_chorus_content;
extern lv_obj_t * ui_lbl_chorus_fx_name;
void ui_event_btn_chorus_bypass(lv_event_t * e);
extern lv_obj_t * ui_btn_chorus_bypass;
extern lv_obj_t * ui_lbl_btn_chorus_bypass;
extern lv_obj_t * ui_pnl_chorus_controls;
extern lv_obj_t * ui_pnl_chorus_mix;
extern lv_obj_t * ui_img_chorus_mix;
void ui_event_arc_chorus_mix(lv_event_t * e);
extern lv_obj_t * ui_arc_chorus_mix;
extern lv_obj_t * ui_lbl_chorus_mix;
extern lv_obj_t * ui_pnl_chorus_rate;
extern lv_obj_t * ui_img_chorus_rate;
void ui_event_arc_chorus_rate(lv_event_t * e);
extern lv_obj_t * ui_arc_chorus_rate;
extern lv_obj_t * ui_lbl_chorus_rate;
extern lv_obj_t * ui_pnl_chorus_depth;
extern lv_obj_t * ui_img_chorus_depth;
void ui_event_arc_chorus_depth(lv_event_t * e);
extern lv_obj_t * ui_arc_chorus_depth;
extern lv_obj_t * ui_lbl_chorus_depth;
extern lv_obj_t * ui_pnl_chorus_mode;
void ui_event_sw_chorus_mode(lv_event_t * e);
extern lv_obj_t * ui_sw_chorus_mode;
extern lv_obj_t * ui_lbl_chorus_mode_1;
extern lv_obj_t * ui_lbl_chorus_mode_2;
// SCREEN: ui_fx_overdrive
void ui_fx_overdrive_screen_init(void);
void ui_event_fx_overdrive(lv_event_t * e);
extern lv_obj_t * ui_fx_overdrive;
extern lv_obj_t * ui_pnl_od_content;
extern lv_obj_t * ui_lbl_od_fx_name;
void ui_event_btn_overdrive_bypass(lv_event_t * e);
extern lv_obj_t * ui_btn_od_bypass;
extern lv_obj_t * ui_lbl_btn_od_bypass;
extern lv_obj_t * ui_pnl_od_controls;
extern lv_obj_t * ui_pnl_od_mix;
extern lv_obj_t * ui_img_od_mix;
void ui_event_arc_overdrive_mix(lv_event_t * e);
extern lv_obj_t * ui_arc_od_mix;
extern lv_obj_t * ui_lbl_od_mix;
extern lv_obj_t * ui_pnl_od_tone;
extern lv_obj_t * ui_img_od_tone;
void ui_event_arc_overdrive_gain(lv_event_t * e);
extern lv_obj_t * ui_arc_od_tone;
extern lv_obj_t * ui_lbl_od_tone;
extern lv_obj_t * ui_pnl_od_gain;
extern lv_obj_t * ui_img_od_gain;
void ui_event_arc_overdrive_tone(lv_event_t * e);
extern lv_obj_t * ui_arc_od_gain;
extern lv_obj_t * ui_lbl_od_gain;
extern lv_obj_t * ui_pnl_od_mode;
void ui_event_sw_overdrive_mode(lv_event_t * e);
extern lv_obj_t * ui_sw_od_mode;
extern lv_obj_t * ui_lbl_od_mode_soft;
extern lv_obj_t * ui_lbl_od_mode_hard;
// SCREEN: ui_fx_cabinet_sim
void ui_fx_cabinet_sim_screen_init(void);
void ui_event_fx_cabinet_sim(lv_event_t * e);
extern lv_obj_t * ui_fx_cabinet_sim;
extern lv_obj_t * ui_pnl_cab_sim_content;
extern lv_obj_t * ui_lbl_cab_sim_fx_name;
void ui_event_btn_cab_sim_bypass(lv_event_t * e);
extern lv_obj_t * ui_btn_cab_sim_bypass;
extern lv_obj_t * ui_lbl_btn_cab_sim_bypass;
void ui_event_roller_cab_sim_ir(lv_event_t * e);
extern lv_obj_t * ui_roller_cab_sim_ir;
extern lv_obj_t * ui_lbl_cab_sim_ir;

LV_IMG_DECLARE(ui_img_pot_ver_line_png);    // assets/pot_ver_line.png
LV_IMG_DECLARE(ui_img_pot_ver_knob_png);    // assets/pot_ver_knob.png
LV_IMG_DECLARE(ui_img_btn_1_inact_png);    // assets/btn_1_inact.png
LV_IMG_DECLARE(ui_img_btn_1_act_png);    // assets/btn_1_act.png
LV_IMG_DECLARE(ui_img_btn_knob_png);    // assets/btn_knob.png
LV_IMG_DECLARE(ui_img_logo_gmfx);   // assets/gmfx-logo-gimp.png

LV_FONT_DECLARE(ui_font_14_bold);

void ui_init(void * user_data);

#ifdef __cplusplus
} /*extern "C"*/
#endif

#endif
